<!-- Q. what is emmet?  -->
A. Emmet is a free plugin for text editors that allows developers to type shortcuts that are expanded into full pieces of code.

<!-- Q. Difference between a Library and Framework? -->
A. 1 Framework comes with lots of packages and bundles as compared to Library.
   2 Library is a Collection of pre-written code that can be used to perform certain tasks whereas Framework is like a foundation for developers to build application for a particular platform.
   3 In case of library we dont really need to create a whole application to use library functionality 

<!-- Q. What is CDN? Why do we use it? -->
A.  Content delivery network, is a network of distributed servers located in various geographical locations around the world.
React Library files are hosted on servers distributed across the globe as part of a Content Delivery Network.
Rather than creating npm app To use the power of React we just need to use CDN links.

<!-- Q. Why is React known as React? -->
A. React is known as React because it just reacts to the changes happening in the component/file.

<!-- Q. What is cross-origin in the script tag? -->
A. It's a standard HTML attribute used when loading external resources, such as scripts and images, from a different domain or origin. It is used as a security measure to control how browsers handle cross-origin requests for these resources.

<!-- Q. Difference between React and ReactDOM? -->
A. React contains all the functionality that we need to perform tasks whereas ReactDOM act as a bridge for connecting React to the browser so that we can use the power of react for webpages and webapps.
React and ReactDOM are two related libraries in the React ecosystem, but they serve different purposes:

1. **React**:

   - **Purpose**: React, often referred to as React.js or ReactJS, is a JavaScript library for building user interfaces (UIs).
   
   - **Key Functionality**:
     - Component-Based: React allows you to build UIs by breaking them down into reusable components. Each component can have its own state and behavior.
     - Virtual DOM: React uses a virtual representation of the DOM (Document Object Model) to efficiently update and render UI changes, minimizing direct manipulation of the actual DOM for better performance.
     - JSX: React introduces JSX (JavaScript XML), a syntax extension that allows you to write HTML-like code within your JavaScript, making it easier to create UI components.

   - **Usage**: React is used to create the structure and logic of UI components. It doesn't deal with the actual rendering of components to the browser.

2. **ReactDOM**:

   - **Purpose**: ReactDOM is a specific package within the React ecosystem that focuses on the rendering of React components to the DOM.

   - **Key Functionality**:
     - DOM Manipulation: ReactDOM provides the `ReactDOM.render()` method, which is used to render React components into the actual DOM. It takes a React component and a DOM element as arguments and injects the component's output into the specified DOM element.

   - **Usage**: ReactDOM is used at the entry point of your application (e.g., in an HTML file) to mount React components into the browser. It handles the integration of React components with the real DOM.

In summary, React is the core library for building UI components and managing their state and behavior. It is responsible for the component's structure and logic. On the other hand, ReactDOM is responsible for the rendering of React components to the actual DOM. It bridges the gap between React's virtual DOM and the browser's real DOM, making it possible for React components to be displayed in a web application.

Here's a simplified analogy: React is like the architect and builder who designs the house and its features, while ReactDOM is like the construction crew that physically builds the house based on the architect's plans. 

<!-- Q. Difference between react.development.js and react.production.js files via CDN? -->
A. The primary difference between `react.development.js` and `react.production.js` files when using React via a CDN is how they are optimized for development and production environments. These files are used based on the specific needs of your project:

1. **`react.development.js`**:

   - **Development Version**: This file is intended for development purposes.
   - **Uncompressed**: It is typically an uncompressed, human-readable JavaScript file with extensive comments and helpful error messages. This makes it easier for developers to read and debug the code.
   - **Larger File Size**: Due to the inclusion of development-related code and comments, the file size is larger compared to the production version.
   - **Slower Performance**: While it is easier to debug, it can be slower in terms of performance due to the additional debugging code.

2. **`react.production.js`**:

   - **Production Version**: This file is optimized for production use.
   - **Minified and Uglified**: It is minified and often run through a process called "code minification" and "code obfuscation" (uglify) to reduce its size and make it less readable. Comments and non-essential code are removed.
   - **Smaller File Size**: It has a significantly smaller file size compared to the development version, which improves page load times.
   - **Faster Performance**: Being minified and optimized, it performs better in production environments.

When developing a React application, you typically use `react.development.js` to take advantage of the development-friendly features like meaningful error messages and readable code. This helps in diagnosing issues during development.

However, when deploying your application to a production environment, it's recommended to switch to `react.production.js` to ensure better performance and reduce the file size of your application. Smaller file sizes mean faster downloads and improved user experiences.

To summarize, choose the appropriate React file (`react.development.js` or `react.production.js`) based on the stage of your project. Use the development version for development and debugging, and switch to the production version for deployment to achieve better performance and smaller file sizes in your production environment.

<!-- Q. What are async and defer? -->
A. Both are boolean attributes used along script tag to load external scripts efficiently into our webpage.

1. Async : ->Does not gaurantee the order of execution of scripts.
           -> Should not be used when different scripts are dependent on each other. 
2. Defer : -> No change in order of execution of scripts
           -> Can be used in either of the conditions.

Defer is preferred over Async attribute. 